// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package frdrpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EntryType int32

const (
	EntryType_UNKNOWN EntryType = 0
	// A channel opening transaction for a channel opened by our node.
	EntryType_LOCAL_CHANNEL_OPEN EntryType = 1
	// A channel opening transaction for a channel opened by a remote node.
	EntryType_REMOTE_CHANNEL_OPEN EntryType = 2
	// The on chain fee paid to open a channel.
	EntryType_CHANNEL_OPEN_FEE EntryType = 3
	// A channel closing transaction.
	EntryType_CHANNEL_CLOSE EntryType = 4
	// Receipt of funds. On chain this reflects receives, off chain settlement
	// of invoices.
	EntryType_RECEIPT EntryType = 5
	// Payment of funds. On chain this reflects sends, off chain settlement
	// of our payments.
	EntryType_PAYMENT EntryType = 6
	// Payment of fees.
	EntryType_FEE EntryType = 7
	// Receipt of a payment to ourselves.
	EntryType_CIRCULAR_RECEIPT EntryType = 8
	// A forward through our node.
	EntryType_FORWARD EntryType = 9
	// Fees earned from forwarding.
	EntryType_FORWARD_FEE EntryType = 10
	// Sending of a payment to ourselves.
	EntryType_CIRCULAR_PAYMENT EntryType = 11
	// The fees paid to send an off chain payment to ourselves.
	EntryType_CIRCULAR_FEE EntryType = 12
	// A transaction that sweeps funds back into our wallet's control.
	EntryType_SWEEP EntryType = 13
	// The amount of fees paid for a sweep transaction.
	EntryType_SWEEP_FEE EntryType = 14
)

var EntryType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "LOCAL_CHANNEL_OPEN",
	2:  "REMOTE_CHANNEL_OPEN",
	3:  "CHANNEL_OPEN_FEE",
	4:  "CHANNEL_CLOSE",
	5:  "RECEIPT",
	6:  "PAYMENT",
	7:  "FEE",
	8:  "CIRCULAR_RECEIPT",
	9:  "FORWARD",
	10: "FORWARD_FEE",
	11: "CIRCULAR_PAYMENT",
	12: "CIRCULAR_FEE",
	13: "SWEEP",
	14: "SWEEP_FEE",
}

var EntryType_value = map[string]int32{
	"UNKNOWN":             0,
	"LOCAL_CHANNEL_OPEN":  1,
	"REMOTE_CHANNEL_OPEN": 2,
	"CHANNEL_OPEN_FEE":    3,
	"CHANNEL_CLOSE":       4,
	"RECEIPT":             5,
	"PAYMENT":             6,
	"FEE":                 7,
	"CIRCULAR_RECEIPT":    8,
	"FORWARD":             9,
	"FORWARD_FEE":         10,
	"CIRCULAR_PAYMENT":    11,
	"CIRCULAR_FEE":        12,
	"SWEEP":               13,
	"SWEEP_FEE":           14,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}

func (EntryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

type CloseRecommendationRequest_Metric int32

const (
	CloseRecommendationRequest_UNKNOWN         CloseRecommendationRequest_Metric = 0
	CloseRecommendationRequest_UPTIME          CloseRecommendationRequest_Metric = 1
	CloseRecommendationRequest_REVENUE         CloseRecommendationRequest_Metric = 2
	CloseRecommendationRequest_INCOMING_VOLUME CloseRecommendationRequest_Metric = 3
	CloseRecommendationRequest_OUTGOING_VOLUME CloseRecommendationRequest_Metric = 4
	CloseRecommendationRequest_TOTAL_VOLUME    CloseRecommendationRequest_Metric = 5
)

var CloseRecommendationRequest_Metric_name = map[int32]string{
	0: "UNKNOWN",
	1: "UPTIME",
	2: "REVENUE",
	3: "INCOMING_VOLUME",
	4: "OUTGOING_VOLUME",
	5: "TOTAL_VOLUME",
}

var CloseRecommendationRequest_Metric_value = map[string]int32{
	"UNKNOWN":         0,
	"UPTIME":          1,
	"REVENUE":         2,
	"INCOMING_VOLUME": 3,
	"OUTGOING_VOLUME": 4,
	"TOTAL_VOLUME":    5,
}

func (x CloseRecommendationRequest_Metric) String() string {
	return proto.EnumName(CloseRecommendationRequest_Metric_name, int32(x))
}

func (CloseRecommendationRequest_Metric) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0, 0}
}

type CloseRecommendationRequest struct {
	//
	//The minimum amount of time in seconds that a channel should have been
	//monitored by lnd to be eligible for close. This value is in place to
	//protect against closing of newer channels.
	MinimumMonitored int64 `protobuf:"varint,1,opt,name=minimum_monitored,json=minimumMonitored,proto3" json:"minimum_monitored,omitempty"`
	//
	//The data point base close recommendations on. Available options are:
	//Uptime: ratio of channel peer's uptime to the period they have been
	//monitored to.
	//Revenue: the revenue that the channel has produced per block that its
	//funding transaction has been confirmed for.
	Metric               CloseRecommendationRequest_Metric `protobuf:"varint,2,opt,name=metric,proto3,enum=frdrpc.CloseRecommendationRequest_Metric" json:"metric,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CloseRecommendationRequest) Reset()         { *m = CloseRecommendationRequest{} }
func (m *CloseRecommendationRequest) String() string { return proto.CompactTextString(m) }
func (*CloseRecommendationRequest) ProtoMessage()    {}
func (*CloseRecommendationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{0}
}

func (m *CloseRecommendationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRecommendationRequest.Unmarshal(m, b)
}
func (m *CloseRecommendationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRecommendationRequest.Marshal(b, m, deterministic)
}
func (m *CloseRecommendationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRecommendationRequest.Merge(m, src)
}
func (m *CloseRecommendationRequest) XXX_Size() int {
	return xxx_messageInfo_CloseRecommendationRequest.Size(m)
}
func (m *CloseRecommendationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRecommendationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRecommendationRequest proto.InternalMessageInfo

func (m *CloseRecommendationRequest) GetMinimumMonitored() int64 {
	if m != nil {
		return m.MinimumMonitored
	}
	return 0
}

func (m *CloseRecommendationRequest) GetMetric() CloseRecommendationRequest_Metric {
	if m != nil {
		return m.Metric
	}
	return CloseRecommendationRequest_UNKNOWN
}

type OutlierRecommendationsRequest struct {
	//
	//The parameters that are common to all close recommendations.
	RecRequest *CloseRecommendationRequest `protobuf:"bytes,1,opt,name=rec_request,json=recRequest,proto3" json:"rec_request,omitempty"`
	//
	//The number of inter-quartile ranges a value needs to be beneath the lower
	//quartile/ above the upper quartile to be considered a lower/upper outlier.
	//Lower values will be more aggressive in recommending channel closes, and
	//upper values will be more conservative. Recommended values are 1.5 for
	//aggressive recommendations and 3 for conservative recommendations.
	OutlierMultiplier    float32  `protobuf:"fixed32,2,opt,name=outlier_multiplier,json=outlierMultiplier,proto3" json:"outlier_multiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OutlierRecommendationsRequest) Reset()         { *m = OutlierRecommendationsRequest{} }
func (m *OutlierRecommendationsRequest) String() string { return proto.CompactTextString(m) }
func (*OutlierRecommendationsRequest) ProtoMessage()    {}
func (*OutlierRecommendationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{1}
}

func (m *OutlierRecommendationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutlierRecommendationsRequest.Unmarshal(m, b)
}
func (m *OutlierRecommendationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutlierRecommendationsRequest.Marshal(b, m, deterministic)
}
func (m *OutlierRecommendationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutlierRecommendationsRequest.Merge(m, src)
}
func (m *OutlierRecommendationsRequest) XXX_Size() int {
	return xxx_messageInfo_OutlierRecommendationsRequest.Size(m)
}
func (m *OutlierRecommendationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OutlierRecommendationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OutlierRecommendationsRequest proto.InternalMessageInfo

func (m *OutlierRecommendationsRequest) GetRecRequest() *CloseRecommendationRequest {
	if m != nil {
		return m.RecRequest
	}
	return nil
}

func (m *OutlierRecommendationsRequest) GetOutlierMultiplier() float32 {
	if m != nil {
		return m.OutlierMultiplier
	}
	return 0
}

type ThresholdRecommendationsRequest struct {
	//
	//The parameters that are common to all close recommendations.
	RecRequest *CloseRecommendationRequest `protobuf:"bytes,1,opt,name=rec_request,json=recRequest,proto3" json:"rec_request,omitempty"`
	//
	//The threshold that recommendations will be calculated based on.
	//For uptime: ratio of uptime to observed lifetime beneath which channels
	//will be recommended for closure.
	//
	//For revenue: revenue per block that capital has been committed to the
	//channel beneath which channels will be recommended for closure. This
	//value is provided per block so that channels that have been open for
	//different periods of time can be compared.
	//
	//For incoming volume: The incoming volume per block that capital has
	//been committed to the channel beneath which channels will be recommended
	//for closure. This value is provided per block so that channels that have
	//been open for different periods of time can be compared.
	//
	//For outgoing volume: The outgoing volume per block that capital has been
	//committed to the channel beneath which channels will be recommended for
	//closure. This value is provided per block so that channels that have been
	//open for different periods of time can be compared.
	//
	//For total volume: The total volume per block that capital has been
	//committed to the channel beneath which channels will be recommended for
	//closure. This value is provided per block so that channels that have been
	//open for different periods of time can be compared.
	ThresholdValue       float32  `protobuf:"fixed32,2,opt,name=threshold_value,json=thresholdValue,proto3" json:"threshold_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ThresholdRecommendationsRequest) Reset()         { *m = ThresholdRecommendationsRequest{} }
func (m *ThresholdRecommendationsRequest) String() string { return proto.CompactTextString(m) }
func (*ThresholdRecommendationsRequest) ProtoMessage()    {}
func (*ThresholdRecommendationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{2}
}

func (m *ThresholdRecommendationsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdRecommendationsRequest.Unmarshal(m, b)
}
func (m *ThresholdRecommendationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdRecommendationsRequest.Marshal(b, m, deterministic)
}
func (m *ThresholdRecommendationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdRecommendationsRequest.Merge(m, src)
}
func (m *ThresholdRecommendationsRequest) XXX_Size() int {
	return xxx_messageInfo_ThresholdRecommendationsRequest.Size(m)
}
func (m *ThresholdRecommendationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdRecommendationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdRecommendationsRequest proto.InternalMessageInfo

func (m *ThresholdRecommendationsRequest) GetRecRequest() *CloseRecommendationRequest {
	if m != nil {
		return m.RecRequest
	}
	return nil
}

func (m *ThresholdRecommendationsRequest) GetThresholdValue() float32 {
	if m != nil {
		return m.ThresholdValue
	}
	return 0
}

type CloseRecommendationsResponse struct {
	//
	//The total number of channels, before filtering out channels that are
	//not eligible for close recommendations.
	TotalChannels int32 `protobuf:"varint,1,opt,name=total_channels,json=totalChannels,proto3" json:"total_channels,omitempty"`
	//
	//The number of channels that were considered for close recommendations.
	ConsideredChannels int32 `protobuf:"varint,2,opt,name=considered_channels,json=consideredChannels,proto3" json:"considered_channels,omitempty"`
	//
	//A set of channel close recommendations. The absence of a channel in this
	//set implies that it was not considered for close because it did not meet
	//the criteria for close recommendations (it is private, or has not been
	//monitored for long enough).
	Recommendations      []*Recommendation `protobuf:"bytes,3,rep,name=recommendations,proto3" json:"recommendations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CloseRecommendationsResponse) Reset()         { *m = CloseRecommendationsResponse{} }
func (m *CloseRecommendationsResponse) String() string { return proto.CompactTextString(m) }
func (*CloseRecommendationsResponse) ProtoMessage()    {}
func (*CloseRecommendationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{3}
}

func (m *CloseRecommendationsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CloseRecommendationsResponse.Unmarshal(m, b)
}
func (m *CloseRecommendationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CloseRecommendationsResponse.Marshal(b, m, deterministic)
}
func (m *CloseRecommendationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseRecommendationsResponse.Merge(m, src)
}
func (m *CloseRecommendationsResponse) XXX_Size() int {
	return xxx_messageInfo_CloseRecommendationsResponse.Size(m)
}
func (m *CloseRecommendationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseRecommendationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CloseRecommendationsResponse proto.InternalMessageInfo

func (m *CloseRecommendationsResponse) GetTotalChannels() int32 {
	if m != nil {
		return m.TotalChannels
	}
	return 0
}

func (m *CloseRecommendationsResponse) GetConsideredChannels() int32 {
	if m != nil {
		return m.ConsideredChannels
	}
	return 0
}

func (m *CloseRecommendationsResponse) GetRecommendations() []*Recommendation {
	if m != nil {
		return m.Recommendations
	}
	return nil
}

type Recommendation struct {
	//
	//The channel point [funding txid: outpoint] of the channel being considered
	//for close.
	ChanPoint string `protobuf:"bytes,1,opt,name=chan_point,json=chanPoint,proto3" json:"chan_point,omitempty"`
	// The value of the metric that close recommendations were based on.
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	// A boolean indicating whether we recommend closing the channel.
	RecommendClose       bool     `protobuf:"varint,3,opt,name=recommend_close,json=recommendClose,proto3" json:"recommend_close,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Recommendation) Reset()         { *m = Recommendation{} }
func (m *Recommendation) String() string { return proto.CompactTextString(m) }
func (*Recommendation) ProtoMessage()    {}
func (*Recommendation) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{4}
}

func (m *Recommendation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Recommendation.Unmarshal(m, b)
}
func (m *Recommendation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Recommendation.Marshal(b, m, deterministic)
}
func (m *Recommendation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recommendation.Merge(m, src)
}
func (m *Recommendation) XXX_Size() int {
	return xxx_messageInfo_Recommendation.Size(m)
}
func (m *Recommendation) XXX_DiscardUnknown() {
	xxx_messageInfo_Recommendation.DiscardUnknown(m)
}

var xxx_messageInfo_Recommendation proto.InternalMessageInfo

func (m *Recommendation) GetChanPoint() string {
	if m != nil {
		return m.ChanPoint
	}
	return ""
}

func (m *Recommendation) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Recommendation) GetRecommendClose() bool {
	if m != nil {
		return m.RecommendClose
	}
	return false
}

type RevenueReportRequest struct {
	//
	//The funding transaction outpoints for the channels to generate a revenue
	//report for. If this is empty, it will be generated for all open and closed
	//channels. Channel funding points should be expressed with the format
	//fundingTxID:outpoint.
	ChanPoints []string `protobuf:"bytes,1,rep,name=chan_points,json=chanPoints,proto3" json:"chan_points,omitempty"`
	//
	//Start time is beginning of the range over which the report will be
	//generated, expressed as unix epoch offset in seconds.
	StartTime uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	//
	//End time is end of the range over which the report will be
	//generated, expressed as unix epoch offset in seconds.
	EndTime              uint64   `protobuf:"varint,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RevenueReportRequest) Reset()         { *m = RevenueReportRequest{} }
func (m *RevenueReportRequest) String() string { return proto.CompactTextString(m) }
func (*RevenueReportRequest) ProtoMessage()    {}
func (*RevenueReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{5}
}

func (m *RevenueReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReportRequest.Unmarshal(m, b)
}
func (m *RevenueReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReportRequest.Marshal(b, m, deterministic)
}
func (m *RevenueReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReportRequest.Merge(m, src)
}
func (m *RevenueReportRequest) XXX_Size() int {
	return xxx_messageInfo_RevenueReportRequest.Size(m)
}
func (m *RevenueReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReportRequest proto.InternalMessageInfo

func (m *RevenueReportRequest) GetChanPoints() []string {
	if m != nil {
		return m.ChanPoints
	}
	return nil
}

func (m *RevenueReportRequest) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *RevenueReportRequest) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

type RevenueReportResponse struct {
	//
	//Reports is a set of pairwise revenue report generated for the channel(s)
	//over the period specified.
	Reports              []*RevenueReport `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RevenueReportResponse) Reset()         { *m = RevenueReportResponse{} }
func (m *RevenueReportResponse) String() string { return proto.CompactTextString(m) }
func (*RevenueReportResponse) ProtoMessage()    {}
func (*RevenueReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{6}
}

func (m *RevenueReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReportResponse.Unmarshal(m, b)
}
func (m *RevenueReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReportResponse.Marshal(b, m, deterministic)
}
func (m *RevenueReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReportResponse.Merge(m, src)
}
func (m *RevenueReportResponse) XXX_Size() int {
	return xxx_messageInfo_RevenueReportResponse.Size(m)
}
func (m *RevenueReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReportResponse proto.InternalMessageInfo

func (m *RevenueReportResponse) GetReports() []*RevenueReport {
	if m != nil {
		return m.Reports
	}
	return nil
}

type RevenueReport struct {
	//
	//Target channel is the channel that the report is generated for; incoming
	//fields in the report mean that this channel was the incoming channel,
	//and the pair as the outgoing, outgoing fields mean that this channel was
	//the outgoing channel and the peer was the incoming channel.
	TargetChannel string `protobuf:"bytes,1,opt,name=target_channel,json=targetChannel,proto3" json:"target_channel,omitempty"`
	//
	//Pair reports maps the channel point of a peer that we generated revenue
	//with to a report detailing the revenue.
	PairReports          map[string]*PairReport `protobuf:"bytes,2,rep,name=pair_reports,json=pairReports,proto3" json:"pair_reports,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *RevenueReport) Reset()         { *m = RevenueReport{} }
func (m *RevenueReport) String() string { return proto.CompactTextString(m) }
func (*RevenueReport) ProtoMessage()    {}
func (*RevenueReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{7}
}

func (m *RevenueReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RevenueReport.Unmarshal(m, b)
}
func (m *RevenueReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RevenueReport.Marshal(b, m, deterministic)
}
func (m *RevenueReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevenueReport.Merge(m, src)
}
func (m *RevenueReport) XXX_Size() int {
	return xxx_messageInfo_RevenueReport.Size(m)
}
func (m *RevenueReport) XXX_DiscardUnknown() {
	xxx_messageInfo_RevenueReport.DiscardUnknown(m)
}

var xxx_messageInfo_RevenueReport proto.InternalMessageInfo

func (m *RevenueReport) GetTargetChannel() string {
	if m != nil {
		return m.TargetChannel
	}
	return ""
}

func (m *RevenueReport) GetPairReports() map[string]*PairReport {
	if m != nil {
		return m.PairReports
	}
	return nil
}

type PairReport struct {
	//
	//Amount outgoing msat is the amount in millisatoshis that arrived
	//on the pair channel to be forwarded onwards by our channel.
	AmountOutgoingMsat int64 `protobuf:"varint,1,opt,name=amount_outgoing_msat,json=amountOutgoingMsat,proto3" json:"amount_outgoing_msat,omitempty"`
	//
	//Fees outgoing is the amount of fees in millisatoshis that we
	//attribute to the channel for its role as the outgoing channel in
	//forwards.
	FeesOutgoingMsat int64 `protobuf:"varint,2,opt,name=fees_outgoing_msat,json=feesOutgoingMsat,proto3" json:"fees_outgoing_msat,omitempty"`
	//
	//Amount incoming msat is the amount in millisatoshis that arrived
	//on our channel to be forwarded onwards by the pair channel.
	AmountIncomingMsat int64 `protobuf:"varint,3,opt,name=amount_incoming_msat,json=amountIncomingMsat,proto3" json:"amount_incoming_msat,omitempty"`
	//
	//Fees incoming is the amount of fees in millisatoshis that we
	//attribute to the channel for its role as the incoming channel in
	//forwards.
	FeesIncomingMsat     int64    `protobuf:"varint,4,opt,name=fees_incoming_msat,json=feesIncomingMsat,proto3" json:"fees_incoming_msat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PairReport) Reset()         { *m = PairReport{} }
func (m *PairReport) String() string { return proto.CompactTextString(m) }
func (*PairReport) ProtoMessage()    {}
func (*PairReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{8}
}

func (m *PairReport) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PairReport.Unmarshal(m, b)
}
func (m *PairReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PairReport.Marshal(b, m, deterministic)
}
func (m *PairReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PairReport.Merge(m, src)
}
func (m *PairReport) XXX_Size() int {
	return xxx_messageInfo_PairReport.Size(m)
}
func (m *PairReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PairReport.DiscardUnknown(m)
}

var xxx_messageInfo_PairReport proto.InternalMessageInfo

func (m *PairReport) GetAmountOutgoingMsat() int64 {
	if m != nil {
		return m.AmountOutgoingMsat
	}
	return 0
}

func (m *PairReport) GetFeesOutgoingMsat() int64 {
	if m != nil {
		return m.FeesOutgoingMsat
	}
	return 0
}

func (m *PairReport) GetAmountIncomingMsat() int64 {
	if m != nil {
		return m.AmountIncomingMsat
	}
	return 0
}

func (m *PairReport) GetFeesIncomingMsat() int64 {
	if m != nil {
		return m.FeesIncomingMsat
	}
	return 0
}

type ChannelInsightsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInsightsRequest) Reset()         { *m = ChannelInsightsRequest{} }
func (m *ChannelInsightsRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelInsightsRequest) ProtoMessage()    {}
func (*ChannelInsightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{9}
}

func (m *ChannelInsightsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInsightsRequest.Unmarshal(m, b)
}
func (m *ChannelInsightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInsightsRequest.Marshal(b, m, deterministic)
}
func (m *ChannelInsightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInsightsRequest.Merge(m, src)
}
func (m *ChannelInsightsRequest) XXX_Size() int {
	return xxx_messageInfo_ChannelInsightsRequest.Size(m)
}
func (m *ChannelInsightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInsightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInsightsRequest proto.InternalMessageInfo

type ChannelInsightsResponse struct {
	// Insights for the set of currently open channels.
	ChannelInsights      []*ChannelInsight `protobuf:"bytes,1,rep,name=channel_insights,json=channelInsights,proto3" json:"channel_insights,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ChannelInsightsResponse) Reset()         { *m = ChannelInsightsResponse{} }
func (m *ChannelInsightsResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelInsightsResponse) ProtoMessage()    {}
func (*ChannelInsightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{10}
}

func (m *ChannelInsightsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInsightsResponse.Unmarshal(m, b)
}
func (m *ChannelInsightsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInsightsResponse.Marshal(b, m, deterministic)
}
func (m *ChannelInsightsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInsightsResponse.Merge(m, src)
}
func (m *ChannelInsightsResponse) XXX_Size() int {
	return xxx_messageInfo_ChannelInsightsResponse.Size(m)
}
func (m *ChannelInsightsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInsightsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInsightsResponse proto.InternalMessageInfo

func (m *ChannelInsightsResponse) GetChannelInsights() []*ChannelInsight {
	if m != nil {
		return m.ChannelInsights
	}
	return nil
}

type ChannelInsight struct {
	// The outpoint of the channel's funding transaction.
	ChanPoint string `protobuf:"bytes,1,opt,name=chan_point,json=chanPoint,proto3" json:"chan_point,omitempty"`
	//
	//The amount of time in seconds that we have monitored the channel peer's
	//uptime for.
	MonitoredSeconds uint64 `protobuf:"varint,2,opt,name=monitored_seconds,json=monitoredSeconds,proto3" json:"monitored_seconds,omitempty"`
	//
	//The amount of time in seconds that the channel peer has been online over
	//the period it has been monitored for.
	UptimeSeconds uint64 `protobuf:"varint,3,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	//
	//The volume, in millisatoshis, that has been forwarded with this channel as
	//the incoming channel.
	VolumeIncomingMsat int64 `protobuf:"varint,4,opt,name=volume_incoming_msat,json=volumeIncomingMsat,proto3" json:"volume_incoming_msat,omitempty"`
	//
	//The volume, in millisatoshis, that has been forwarded with this channel as
	//the outgoing channel.
	VolumeOutgoingMsat int64 `protobuf:"varint,5,opt,name=volume_outgoing_msat,json=volumeOutgoingMsat,proto3" json:"volume_outgoing_msat,omitempty"`
	//
	//The total fees earned by this channel for its participation in forwards,
	//expressed in millisatoshis. Note that we attribute fees evenly across
	//incoming and outgoing channels.
	FeesEarnedMsat int64 `protobuf:"varint,6,opt,name=fees_earned_msat,json=feesEarnedMsat,proto3" json:"fees_earned_msat,omitempty"`
	// The number of confirmations the funding transaction has.
	Confirmations uint32 `protobuf:"varint,7,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	// True if the channel is private.
	Private              bool     `protobuf:"varint,8,opt,name=private,proto3" json:"private,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelInsight) Reset()         { *m = ChannelInsight{} }
func (m *ChannelInsight) String() string { return proto.CompactTextString(m) }
func (*ChannelInsight) ProtoMessage()    {}
func (*ChannelInsight) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{11}
}

func (m *ChannelInsight) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelInsight.Unmarshal(m, b)
}
func (m *ChannelInsight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelInsight.Marshal(b, m, deterministic)
}
func (m *ChannelInsight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInsight.Merge(m, src)
}
func (m *ChannelInsight) XXX_Size() int {
	return xxx_messageInfo_ChannelInsight.Size(m)
}
func (m *ChannelInsight) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInsight.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInsight proto.InternalMessageInfo

func (m *ChannelInsight) GetChanPoint() string {
	if m != nil {
		return m.ChanPoint
	}
	return ""
}

func (m *ChannelInsight) GetMonitoredSeconds() uint64 {
	if m != nil {
		return m.MonitoredSeconds
	}
	return 0
}

func (m *ChannelInsight) GetUptimeSeconds() uint64 {
	if m != nil {
		return m.UptimeSeconds
	}
	return 0
}

func (m *ChannelInsight) GetVolumeIncomingMsat() int64 {
	if m != nil {
		return m.VolumeIncomingMsat
	}
	return 0
}

func (m *ChannelInsight) GetVolumeOutgoingMsat() int64 {
	if m != nil {
		return m.VolumeOutgoingMsat
	}
	return 0
}

func (m *ChannelInsight) GetFeesEarnedMsat() int64 {
	if m != nil {
		return m.FeesEarnedMsat
	}
	return 0
}

func (m *ChannelInsight) GetConfirmations() uint32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *ChannelInsight) GetPrivate() bool {
	if m != nil {
		return m.Private
	}
	return false
}

type FiatEstimateRequest struct {
	Requests             []*FiatEstimateRequest_PriceRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                            `json:"-"`
	XXX_unrecognized     []byte                              `json:"-"`
	XXX_sizecache        int32                               `json:"-"`
}

func (m *FiatEstimateRequest) Reset()         { *m = FiatEstimateRequest{} }
func (m *FiatEstimateRequest) String() string { return proto.CompactTextString(m) }
func (*FiatEstimateRequest) ProtoMessage()    {}
func (*FiatEstimateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{12}
}

func (m *FiatEstimateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FiatEstimateRequest.Unmarshal(m, b)
}
func (m *FiatEstimateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FiatEstimateRequest.Marshal(b, m, deterministic)
}
func (m *FiatEstimateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatEstimateRequest.Merge(m, src)
}
func (m *FiatEstimateRequest) XXX_Size() int {
	return xxx_messageInfo_FiatEstimateRequest.Size(m)
}
func (m *FiatEstimateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatEstimateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FiatEstimateRequest proto.InternalMessageInfo

func (m *FiatEstimateRequest) GetRequests() []*FiatEstimateRequest_PriceRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type FiatEstimateRequest_PriceRequest struct {
	// id is a unique identifier for the request.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The amount to be converted to fiat in millisatoshis.
	AmountMsat uint64 `protobuf:"varint,2,opt,name=amount_msat,json=amountMsat,proto3" json:"amount_msat,omitempty"`
	// The unix timestamp at which the price should be quoted.
	Timestamp            int64    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FiatEstimateRequest_PriceRequest) Reset()         { *m = FiatEstimateRequest_PriceRequest{} }
func (m *FiatEstimateRequest_PriceRequest) String() string { return proto.CompactTextString(m) }
func (*FiatEstimateRequest_PriceRequest) ProtoMessage()    {}
func (*FiatEstimateRequest_PriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{12, 0}
}

func (m *FiatEstimateRequest_PriceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FiatEstimateRequest_PriceRequest.Unmarshal(m, b)
}
func (m *FiatEstimateRequest_PriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FiatEstimateRequest_PriceRequest.Marshal(b, m, deterministic)
}
func (m *FiatEstimateRequest_PriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatEstimateRequest_PriceRequest.Merge(m, src)
}
func (m *FiatEstimateRequest_PriceRequest) XXX_Size() int {
	return xxx_messageInfo_FiatEstimateRequest_PriceRequest.Size(m)
}
func (m *FiatEstimateRequest_PriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatEstimateRequest_PriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FiatEstimateRequest_PriceRequest proto.InternalMessageInfo

func (m *FiatEstimateRequest_PriceRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FiatEstimateRequest_PriceRequest) GetAmountMsat() uint64 {
	if m != nil {
		return m.AmountMsat
	}
	return 0
}

func (m *FiatEstimateRequest_PriceRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type FiatEstimateResponse struct {
	FiatValues           map[string]string `protobuf:"bytes,1,rep,name=fiat_values,json=fiatValues,proto3" json:"fiat_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FiatEstimateResponse) Reset()         { *m = FiatEstimateResponse{} }
func (m *FiatEstimateResponse) String() string { return proto.CompactTextString(m) }
func (*FiatEstimateResponse) ProtoMessage()    {}
func (*FiatEstimateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{13}
}

func (m *FiatEstimateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FiatEstimateResponse.Unmarshal(m, b)
}
func (m *FiatEstimateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FiatEstimateResponse.Marshal(b, m, deterministic)
}
func (m *FiatEstimateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FiatEstimateResponse.Merge(m, src)
}
func (m *FiatEstimateResponse) XXX_Size() int {
	return xxx_messageInfo_FiatEstimateResponse.Size(m)
}
func (m *FiatEstimateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FiatEstimateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FiatEstimateResponse proto.InternalMessageInfo

func (m *FiatEstimateResponse) GetFiatValues() map[string]string {
	if m != nil {
		return m.FiatValues
	}
	return nil
}

type NodeReportRequest struct {
	// The unix time from which to produce the report, inclusive.
	StartTime uint64 `protobuf:"varint,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The unix time until which to produce the report, exclusive.
	EndTime uint64 `protobuf:"varint,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	//
	//Set to generate a report without conversion to fiat. If set, fiat values
	//will display as 0.
	DisableFiat          bool     `protobuf:"varint,4,opt,name=disable_fiat,json=disableFiat,proto3" json:"disable_fiat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeReportRequest) Reset()         { *m = NodeReportRequest{} }
func (m *NodeReportRequest) String() string { return proto.CompactTextString(m) }
func (*NodeReportRequest) ProtoMessage()    {}
func (*NodeReportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{14}
}

func (m *NodeReportRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReportRequest.Unmarshal(m, b)
}
func (m *NodeReportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReportRequest.Marshal(b, m, deterministic)
}
func (m *NodeReportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReportRequest.Merge(m, src)
}
func (m *NodeReportRequest) XXX_Size() int {
	return xxx_messageInfo_NodeReportRequest.Size(m)
}
func (m *NodeReportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReportRequest proto.InternalMessageInfo

func (m *NodeReportRequest) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *NodeReportRequest) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *NodeReportRequest) GetDisableFiat() bool {
	if m != nil {
		return m.DisableFiat
	}
	return false
}

type ReportEntry struct {
	// The unix timestamp of the event.
	Timestamp uint64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Whether the entry occurred on chain or off chain.
	OnChain bool `protobuf:"varint,2,opt,name=on_chain,json=onChain,proto3" json:"on_chain,omitempty"`
	// The amount of the entry, expressed in millisatoshis.
	Amount uint64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Whether the entry is a credit or a debit.
	Credit bool `protobuf:"varint,4,opt,name=credit,proto3" json:"credit,omitempty"`
	// The asset affected by the entry.
	Asset string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	// The kind of activity that this entry represents.
	Type EntryType `protobuf:"varint,6,opt,name=type,proto3,enum=frdrpc.EntryType" json:"type,omitempty"`
	// The transaction id of the entry.
	Txid string `protobuf:"bytes,7,opt,name=txid,proto3" json:"txid,omitempty"`
	// The fiat amount of the entry's amount in USD.
	Fiat string `protobuf:"bytes,8,opt,name=fiat,proto3" json:"fiat,omitempty"`
	// A unique identifier for the entry, if available.
	Reference string `protobuf:"bytes,9,opt,name=reference,proto3" json:"reference,omitempty"`
	// An additional note for the entry, providing additional context.
	Note                 string   `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReportEntry) Reset()         { *m = ReportEntry{} }
func (m *ReportEntry) String() string { return proto.CompactTextString(m) }
func (*ReportEntry) ProtoMessage()    {}
func (*ReportEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{15}
}

func (m *ReportEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReportEntry.Unmarshal(m, b)
}
func (m *ReportEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReportEntry.Marshal(b, m, deterministic)
}
func (m *ReportEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReportEntry.Merge(m, src)
}
func (m *ReportEntry) XXX_Size() int {
	return xxx_messageInfo_ReportEntry.Size(m)
}
func (m *ReportEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ReportEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ReportEntry proto.InternalMessageInfo

func (m *ReportEntry) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReportEntry) GetOnChain() bool {
	if m != nil {
		return m.OnChain
	}
	return false
}

func (m *ReportEntry) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ReportEntry) GetCredit() bool {
	if m != nil {
		return m.Credit
	}
	return false
}

func (m *ReportEntry) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *ReportEntry) GetType() EntryType {
	if m != nil {
		return m.Type
	}
	return EntryType_UNKNOWN
}

func (m *ReportEntry) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *ReportEntry) GetFiat() string {
	if m != nil {
		return m.Fiat
	}
	return ""
}

func (m *ReportEntry) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *ReportEntry) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type NodeReportResponse struct {
	// On chain reports for the period queried.
	Reports              []*ReportEntry `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NodeReportResponse) Reset()         { *m = NodeReportResponse{} }
func (m *NodeReportResponse) String() string { return proto.CompactTextString(m) }
func (*NodeReportResponse) ProtoMessage()    {}
func (*NodeReportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a6da22d6a3feb1, []int{16}
}

func (m *NodeReportResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeReportResponse.Unmarshal(m, b)
}
func (m *NodeReportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeReportResponse.Marshal(b, m, deterministic)
}
func (m *NodeReportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeReportResponse.Merge(m, src)
}
func (m *NodeReportResponse) XXX_Size() int {
	return xxx_messageInfo_NodeReportResponse.Size(m)
}
func (m *NodeReportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeReportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NodeReportResponse proto.InternalMessageInfo

func (m *NodeReportResponse) GetReports() []*ReportEntry {
	if m != nil {
		return m.Reports
	}
	return nil
}

func init() {
	proto.RegisterEnum("frdrpc.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("frdrpc.CloseRecommendationRequest_Metric", CloseRecommendationRequest_Metric_name, CloseRecommendationRequest_Metric_value)
	proto.RegisterType((*CloseRecommendationRequest)(nil), "frdrpc.CloseRecommendationRequest")
	proto.RegisterType((*OutlierRecommendationsRequest)(nil), "frdrpc.OutlierRecommendationsRequest")
	proto.RegisterType((*ThresholdRecommendationsRequest)(nil), "frdrpc.ThresholdRecommendationsRequest")
	proto.RegisterType((*CloseRecommendationsResponse)(nil), "frdrpc.CloseRecommendationsResponse")
	proto.RegisterType((*Recommendation)(nil), "frdrpc.Recommendation")
	proto.RegisterType((*RevenueReportRequest)(nil), "frdrpc.RevenueReportRequest")
	proto.RegisterType((*RevenueReportResponse)(nil), "frdrpc.RevenueReportResponse")
	proto.RegisterType((*RevenueReport)(nil), "frdrpc.RevenueReport")
	proto.RegisterMapType((map[string]*PairReport)(nil), "frdrpc.RevenueReport.PairReportsEntry")
	proto.RegisterType((*PairReport)(nil), "frdrpc.PairReport")
	proto.RegisterType((*ChannelInsightsRequest)(nil), "frdrpc.ChannelInsightsRequest")
	proto.RegisterType((*ChannelInsightsResponse)(nil), "frdrpc.ChannelInsightsResponse")
	proto.RegisterType((*ChannelInsight)(nil), "frdrpc.ChannelInsight")
	proto.RegisterType((*FiatEstimateRequest)(nil), "frdrpc.FiatEstimateRequest")
	proto.RegisterType((*FiatEstimateRequest_PriceRequest)(nil), "frdrpc.FiatEstimateRequest.PriceRequest")
	proto.RegisterType((*FiatEstimateResponse)(nil), "frdrpc.FiatEstimateResponse")
	proto.RegisterMapType((map[string]string)(nil), "frdrpc.FiatEstimateResponse.FiatValuesEntry")
	proto.RegisterType((*NodeReportRequest)(nil), "frdrpc.NodeReportRequest")
	proto.RegisterType((*ReportEntry)(nil), "frdrpc.ReportEntry")
	proto.RegisterType((*NodeReportResponse)(nil), "frdrpc.NodeReportResponse")
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 1534 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4b, 0x6f, 0x1b, 0x47,
	0x12, 0xde, 0x19, 0x52, 0x7c, 0x14, 0x45, 0x6a, 0xd4, 0x92, 0x65, 0x9a, 0x96, 0x6d, 0xed, 0xc0,
	0x5e, 0xd3, 0x2f, 0xd1, 0xe6, 0x5e, 0x16, 0x0b, 0x2c, 0xb0, 0x04, 0x3d, 0xb2, 0xe9, 0x15, 0x1f,
	0x18, 0x51, 0x36, 0x16, 0xd8, 0xc5, 0x60, 0x3c, 0xd3, 0x92, 0x66, 0x97, 0xf3, 0x70, 0x4f, 0x53,
	0x58, 0x61, 0x91, 0x4b, 0xae, 0x41, 0x90, 0x83, 0x2f, 0xb9, 0xe4, 0x96, 0x1f, 0x91, 0x63, 0x7e,
	0x40, 0x2e, 0x41, 0x90, 0x7f, 0x90, 0x3f, 0x90, 0x5b, 0x8e, 0x41, 0x3f, 0x66, 0x38, 0x43, 0x53,
	0x72, 0x2e, 0xb9, 0x75, 0x7f, 0x55, 0x5d, 0x5f, 0x75, 0x55, 0x4d, 0x75, 0x0d, 0x54, 0x49, 0xe4,
	0xec, 0x47, 0x24, 0xa4, 0x21, 0x2a, 0x9d, 0x10, 0x97, 0x44, 0x4e, 0x6b, 0xf7, 0x34, 0x0c, 0x4f,
	0x67, 0xb8, 0x63, 0x47, 0x5e, 0xc7, 0x0e, 0x82, 0x90, 0xda, 0xd4, 0x0b, 0x83, 0x58, 0x68, 0xe9,
	0xbf, 0x28, 0xd0, 0xea, 0xcf, 0xc2, 0x18, 0x9b, 0xd8, 0x09, 0x7d, 0x1f, 0x07, 0x2e, 0x17, 0x9b,
	0xf8, 0xdd, 0x1c, 0xc7, 0x14, 0x3d, 0x82, 0x4d, 0xdf, 0x0b, 0x3c, 0x7f, 0xee, 0x5b, 0x7e, 0x18,
	0x78, 0x34, 0x24, 0xd8, 0x6d, 0x2a, 0x7b, 0x4a, 0xbb, 0x60, 0x6a, 0x52, 0x30, 0x4c, 0x70, 0xd4,
	0x83, 0x92, 0x8f, 0x29, 0xf1, 0x9c, 0xa6, 0xba, 0xa7, 0xb4, 0x1b, 0xdd, 0x07, 0xfb, 0xc2, 0x85,
	0xfd, 0xcb, 0x09, 0xf6, 0x87, 0xfc, 0x80, 0x29, 0x0f, 0xea, 0xff, 0x81, 0x92, 0x40, 0x50, 0x0d,
	0xca, 0xc7, 0xa3, 0x7f, 0x8c, 0xc6, 0x6f, 0x46, 0xda, 0x1f, 0x10, 0x40, 0xe9, 0x78, 0x32, 0x1d,
	0x0c, 0x0d, 0x4d, 0x61, 0x02, 0xd3, 0x78, 0x6d, 0x8c, 0x8e, 0x0d, 0x4d, 0x45, 0x5b, 0xb0, 0x31,
	0x18, 0xf5, 0xc7, 0xc3, 0xc1, 0xe8, 0x85, 0xf5, 0x7a, 0x7c, 0x78, 0x3c, 0x34, 0xb4, 0x02, 0x03,
	0xc7, 0xc7, 0xd3, 0x17, 0xe3, 0x0c, 0x58, 0x44, 0x1a, 0xac, 0x4f, 0xc7, 0xd3, 0xde, 0x61, 0x82,
	0xac, 0xe9, 0xef, 0x15, 0xb8, 0x35, 0x9e, 0xd3, 0x99, 0x87, 0x49, 0xde, 0xb7, 0x38, 0xb9, 0x7d,
	0x1f, 0x6a, 0x04, 0x3b, 0x16, 0x11, 0x5b, 0x7e, 0xef, 0x5a, 0x57, 0xff, 0xf8, 0xad, 0x4c, 0x20,
	0xd8, 0x49, 0x8c, 0x3c, 0x01, 0x14, 0x0a, 0x16, 0xcb, 0x9f, 0xcf, 0xa8, 0x17, 0xb1, 0x25, 0x8f,
	0x90, 0x6a, 0x6e, 0x4a, 0xc9, 0x30, 0x15, 0xe8, 0x5f, 0x28, 0x70, 0x67, 0x7a, 0x46, 0x70, 0x7c,
	0x16, 0xce, 0xdc, 0xdf, 0xd3, 0xaf, 0xfb, 0xb0, 0x41, 0x13, 0x1e, 0xeb, 0xdc, 0x9e, 0xcd, 0xb1,
	0x74, 0xaa, 0x91, 0xc2, 0xaf, 0x19, 0xaa, 0x7f, 0xa3, 0xc0, 0xee, 0x0a, 0x9b, 0xb1, 0x89, 0xe3,
	0x28, 0x0c, 0x62, 0x8c, 0xee, 0x41, 0x83, 0x86, 0xd4, 0x9e, 0x59, 0xce, 0x99, 0x1d, 0x04, 0x78,
	0x16, 0x73, 0x8f, 0xd6, 0xcc, 0x3a, 0x47, 0xfb, 0x12, 0x44, 0x1d, 0xd8, 0x72, 0xc2, 0x20, 0xf6,
	0x5c, 0x4c, 0xb0, 0xbb, 0xd0, 0x55, 0xb9, 0x2e, 0x5a, 0x88, 0xd2, 0x03, 0x7f, 0x87, 0x0d, 0x92,
	0xa7, 0x6c, 0x16, 0xf6, 0x0a, 0xed, 0x5a, 0x77, 0x27, 0xb9, 0xea, 0xd2, 0x2d, 0x97, 0xd5, 0xf5,
	0x00, 0x1a, 0x79, 0x15, 0x74, 0x0b, 0x80, 0x31, 0x5b, 0x51, 0xe8, 0x05, 0x22, 0x72, 0x55, 0xb3,
	0xca, 0x90, 0x09, 0x03, 0xd0, 0x36, 0xac, 0x65, 0x43, 0x21, 0x36, 0x2c, 0x54, 0xa9, 0x65, 0xcb,
	0x61, 0xa1, 0x68, 0x16, 0xf6, 0x94, 0x76, 0xc5, 0x6c, 0xa4, 0x30, 0x0f, 0x90, 0xfe, 0x0e, 0xb6,
	0x4d, 0x7c, 0x8e, 0x83, 0x39, 0x36, 0x71, 0x14, 0x12, 0x9a, 0xc4, 0xfa, 0x0e, 0xd4, 0x16, 0xac,
	0x2c, 0x3c, 0x85, 0x76, 0xd5, 0x84, 0x94, 0x36, 0x66, 0x6e, 0xc5, 0xd4, 0x26, 0xd4, 0xa2, 0x9e,
	0x2f, 0xc8, 0x8b, 0x66, 0x95, 0x23, 0x53, 0xcf, 0xc7, 0xe8, 0x06, 0x54, 0x18, 0x35, 0x17, 0x16,
	0xb8, 0xb0, 0x8c, 0x03, 0x97, 0x89, 0xf4, 0x97, 0x70, 0x6d, 0x89, 0x52, 0x66, 0xa5, 0x03, 0x65,
	0xc2, 0x11, 0xc1, 0x57, 0xeb, 0x5e, 0x5b, 0x44, 0x2d, 0xab, 0x9f, 0x68, 0xe9, 0x3f, 0x2a, 0x50,
	0xcf, 0x89, 0x78, 0x62, 0x6d, 0x72, 0x8a, 0x69, 0x92, 0x2d, 0x19, 0xb0, 0xba, 0x40, 0x65, 0xa2,
	0xd0, 0x00, 0xd6, 0x23, 0xdb, 0x23, 0x56, 0x42, 0xa7, 0x72, 0xba, 0x3f, 0xad, 0xa4, 0xdb, 0x9f,
	0xd8, 0x1e, 0x11, 0xcb, 0xd8, 0x08, 0x28, 0xb9, 0x30, 0x6b, 0xd1, 0x02, 0x69, 0x99, 0xa0, 0x2d,
	0x2b, 0x20, 0x0d, 0x0a, 0xff, 0xc5, 0x17, 0x92, 0x9a, 0x2d, 0x51, 0x3b, 0x9b, 0xa5, 0x5a, 0x17,
	0x25, 0x4c, 0x8b, 0xa3, 0x32, 0x73, 0x7f, 0x55, 0xff, 0xa2, 0xe8, 0xdf, 0x29, 0x00, 0x0b, 0x09,
	0x7a, 0x0a, 0xdb, 0xb6, 0x1f, 0xce, 0x03, 0x6a, 0x85, 0x73, 0x7a, 0x1a, 0x7a, 0xc1, 0xa9, 0xe5,
	0xc7, 0x36, 0x95, 0x5d, 0x0d, 0x09, 0xd9, 0x58, 0x8a, 0x86, 0xb1, 0x4d, 0xd1, 0x63, 0x40, 0x27,
	0x18, 0xc7, 0x4b, 0xfa, 0xaa, 0xe8, 0x82, 0x4c, 0x92, 0xd3, 0x5e, 0xd8, 0xf7, 0x02, 0x27, 0xf4,
	0x53, 0xfd, 0x42, 0xd6, 0xfe, 0x40, 0x8a, 0x72, 0xf6, 0xf3, 0xfa, 0xc5, 0x85, 0xfd, 0xac, 0xb6,
	0xde, 0x84, 0x1d, 0x19, 0xf8, 0x41, 0x10, 0x7b, 0xa7, 0x67, 0x34, 0x69, 0x0b, 0xfa, 0xbf, 0xe0,
	0xfa, 0x07, 0x12, 0x59, 0x0c, 0x3d, 0xd0, 0x64, 0x0a, 0x2d, 0x4f, 0xca, 0x64, 0x55, 0xa4, 0xdf,
	0x52, 0xfe, 0xa8, 0xb9, 0xe1, 0xe4, 0x4d, 0xe9, 0xdf, 0xab, 0xd0, 0xc8, 0xeb, 0x7c, 0xec, 0x63,
	0x62, 0x8f, 0x47, 0xf2, 0x38, 0x58, 0x31, 0x76, 0xc2, 0xc0, 0x8d, 0x65, 0x6d, 0x6b, 0xa9, 0xe0,
	0x48, 0xe0, 0xac, 0xd6, 0xe6, 0x11, 0x2b, 0xf0, 0x54, 0x53, 0x14, 0x7a, 0x5d, 0xa0, 0x89, 0xda,
	0x53, 0xd8, 0x3e, 0x0f, 0x67, 0x73, 0x1f, 0xaf, 0x8c, 0x16, 0x12, 0xb2, 0x5c, 0x74, 0x17, 0x27,
	0xf2, 0xf9, 0x5b, 0xcb, 0x9e, 0xc8, 0x65, 0xb0, 0x0d, 0x3c, 0xea, 0x16, 0xb6, 0x49, 0x80, 0x5d,
	0xa1, 0x5d, 0xe2, 0xda, 0x0d, 0x86, 0x1b, 0x1c, 0xe6, 0x9a, 0x77, 0xa1, 0xee, 0x84, 0xc1, 0x89,
	0x47, 0x7c, 0xd9, 0x9f, 0xca, 0x7b, 0x4a, 0xbb, 0x6e, 0xe6, 0x41, 0xd4, 0x84, 0x72, 0x44, 0xbc,
	0x73, 0x9b, 0xe2, 0x66, 0x85, 0xb7, 0x8d, 0x64, 0xab, 0x7f, 0xab, 0xc0, 0xd6, 0x81, 0x67, 0x53,
	0x23, 0xa6, 0x9e, 0x6f, 0x53, 0x9c, 0xf4, 0x8b, 0xe7, 0x50, 0x91, 0xcd, 0x3d, 0x49, 0x53, 0x3b,
	0x49, 0xd3, 0x0a, 0xf5, 0xfd, 0x09, 0xf1, 0x9c, 0x64, 0x63, 0xa6, 0x27, 0x5b, 0xff, 0x86, 0xf5,
	0xac, 0x04, 0x35, 0x40, 0xf5, 0x5c, 0x99, 0x26, 0xd5, 0x73, 0x59, 0x57, 0x92, 0x95, 0x9a, 0x16,
	0x74, 0xd1, 0x04, 0x01, 0xf1, 0xeb, 0xed, 0x42, 0x95, 0xc5, 0x3e, 0xa6, 0xb6, 0x1f, 0xc9, 0xfa,
	0x5d, 0x00, 0xaf, 0x8a, 0x15, 0x55, 0x2b, 0xe8, 0x5f, 0x2b, 0xb0, 0x9d, 0xf7, 0x49, 0x96, 0xdc,
	0x10, 0x6a, 0x27, 0x9e, 0x4d, 0xc5, 0xd3, 0x92, 0x5c, 0xe3, 0xf1, 0xea, 0x6b, 0x88, 0x23, 0x1c,
	0xe4, 0x6f, 0x8e, 0x6c, 0x0d, 0x70, 0x92, 0x02, 0xad, 0xbf, 0xc1, 0xc6, 0x92, 0x78, 0x45, 0x63,
	0xc8, 0xb5, 0xef, 0x6a, 0xb6, 0x09, 0x9c, 0xc3, 0xe6, 0x28, 0x74, 0x97, 0xda, 0x72, 0xbe, 0xeb,
	0x2a, 0x57, 0x75, 0x5d, 0x35, 0xd7, 0x75, 0xd1, 0x1f, 0x61, 0xdd, 0xf5, 0x62, 0xfb, 0xed, 0x0c,
	0x5b, 0xcc, 0x47, 0x5e, 0x7e, 0x15, 0xb3, 0x26, 0x31, 0xe6, 0xe8, 0xab, 0x62, 0xa5, 0xa0, 0x15,
	0xf5, 0xcf, 0x55, 0xa8, 0x09, 0x52, 0xe1, 0x73, 0x2e, 0xa4, 0x92, 0x31, 0x05, 0x18, 0x63, 0x18,
	0xb0, 0x66, 0xeb, 0x05, 0x9c, 0xb1, 0x62, 0x96, 0xc3, 0xa0, 0xcf, 0xb6, 0x68, 0x07, 0x4a, 0x22,
	0x33, 0xf2, 0xbb, 0x90, 0x3b, 0x86, 0x3b, 0x04, 0xbb, 0x5e, 0xe2, 0x83, 0xdc, 0xb1, 0x50, 0xd8,
	0x71, 0x8c, 0x45, 0x9d, 0x57, 0x4d, 0xb1, 0x41, 0xf7, 0xa0, 0x48, 0x2f, 0x22, 0xcc, 0xcb, 0xb9,
	0xd1, 0xdd, 0x4c, 0xb2, 0xc1, 0x7d, 0x9b, 0x5e, 0x44, 0xd8, 0xe4, 0x62, 0x84, 0xa0, 0x48, 0xff,
	0xe7, 0xb9, 0xbc, 0x9c, 0xab, 0x26, 0x5f, 0x33, 0x8c, 0x5f, 0xb5, 0x22, 0x30, 0xb6, 0x66, 0xb7,
	0x21, 0xf8, 0x04, 0x13, 0x1c, 0x38, 0xb8, 0x59, 0x15, 0xdf, 0x7f, 0x0a, 0xb0, 0x13, 0x41, 0x48,
	0x71, 0x13, 0xc4, 0x09, 0xb6, 0xd6, 0xfb, 0x80, 0xb2, 0x79, 0x90, 0xb5, 0xf2, 0x64, 0xf9, 0xad,
	0xda, 0x5a, 0x3c, 0x1e, 0x69, 0xec, 0xd2, 0x97, 0xea, 0xe1, 0x67, 0x2a, 0x54, 0x53, 0x97, 0xf3,
	0x93, 0xe2, 0x0e, 0xa0, 0xc3, 0x71, 0xbf, 0x77, 0x68, 0xf5, 0x5f, 0xf6, 0x46, 0x23, 0xe3, 0xd0,
	0x1a, 0x4f, 0x8c, 0x91, 0xa6, 0xa0, 0xeb, 0xb0, 0x65, 0x1a, 0xc3, 0xf1, 0xd4, 0xc8, 0x0b, 0x54,
	0xb4, 0x0d, 0x5a, 0x16, 0xb1, 0x0e, 0x0c, 0x36, 0x42, 0x6e, 0x42, 0x3d, 0x41, 0xfb, 0x87, 0xe3,
	0x23, 0x36, 0x40, 0xf2, 0xb9, 0xb3, 0x6f, 0x0c, 0x26, 0x53, 0x6d, 0x8d, 0x6d, 0x26, 0xbd, 0x7f,
	0x0e, 0x8d, 0xd1, 0x54, 0x2b, 0xa1, 0x32, 0x14, 0xd8, 0xa9, 0x32, 0xb7, 0x35, 0x30, 0xfb, 0xc7,
	0x87, 0x3d, 0xd3, 0x4a, 0x74, 0x2b, 0x4c, 0xf7, 0x60, 0x6c, 0xbe, 0xe9, 0x99, 0xcf, 0xb5, 0x2a,
	0xda, 0x80, 0x9a, 0xdc, 0x70, 0x26, 0xc8, 0x9d, 0x49, 0x4c, 0xd6, 0xd8, 0xb4, 0x9a, 0xa2, 0x4c,
	0x6f, 0x1d, 0x55, 0x61, 0xed, 0xe8, 0x8d, 0x61, 0x4c, 0xb4, 0x3a, 0xaa, 0x43, 0x95, 0x2f, 0xb9,
	0xa4, 0xd1, 0xfd, 0x79, 0x0d, 0xea, 0x07, 0x36, 0xb1, 0x5d, 0xfb, 0xe2, 0x08, 0x93, 0x73, 0x4c,
	0xd0, 0x97, 0x0a, 0xec, 0xac, 0x9e, 0x6c, 0xd1, 0xbd, 0x24, 0xb0, 0x57, 0x4e, 0xbe, 0xad, 0xbb,
	0x57, 0x0c, 0x93, 0xe9, 0xab, 0xa2, 0x3f, 0xfb, 0xf4, 0x87, 0x9f, 0xde, 0xab, 0x8f, 0xd0, 0x83,
	0xce, 0xf9, 0xb3, 0xce, 0x89, 0x70, 0xa1, 0x23, 0x47, 0xda, 0xb8, 0xf3, 0xff, 0xcc, 0x8c, 0xba,
	0x2f, 0xe6, 0xfb, 0x4f, 0xd0, 0x57, 0x0a, 0x34, 0x2f, 0x1b, 0x6f, 0xd1, 0xfd, 0x84, 0xf5, 0x23,
	0x03, 0xf0, 0x6f, 0x74, 0xaf, 0xcb, 0xdd, 0x7b, 0x8c, 0x1e, 0x66, 0xdd, 0x4b, 0x87, 0xdb, 0xd5,
	0xfe, 0x79, 0xcb, 0x33, 0xd0, 0xee, 0xea, 0xa9, 0x49, 0x3a, 0x72, 0xeb, 0x12, 0xa9, 0xf4, 0xe0,
	0x26, 0xf7, 0xe0, 0x1a, 0xda, 0xca, 0x7a, 0x40, 0x84, 0x2a, 0x8a, 0x60, 0x63, 0xe9, 0xb9, 0x46,
	0xb7, 0x57, 0x3f, 0xc6, 0xe9, 0xbd, 0xef, 0x5c, 0x2a, 0x97, 0x84, 0xbb, 0x9c, 0x70, 0x07, 0x6d,
	0x67, 0x09, 0x93, 0x17, 0x1f, 0x39, 0xb0, 0x9e, 0xed, 0xbb, 0xe8, 0xe6, 0x15, 0x8f, 0x4a, 0x6b,
	0xf7, 0xaa, 0x56, 0xad, 0x37, 0x39, 0x11, 0x42, 0x5a, 0x96, 0x88, 0xf7, 0x04, 0x07, 0x60, 0xf1,
	0x85, 0xa3, 0x1b, 0x89, 0x95, 0x0f, 0xba, 0x6f, 0xab, 0xb5, 0x4a, 0x24, 0xcd, 0xdf, 0xe6, 0xe6,
	0x9b, 0x68, 0x27, 0x6b, 0x3e, 0x08, 0xd9, 0xff, 0x01, 0xd3, 0x7b, 0x5b, 0xe2, 0x7f, 0xaf, 0x7f,
	0xfe, 0x35, 0x00, 0x00, 0xff, 0xff, 0x34, 0xff, 0x13, 0x01, 0xf0, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaradayServerClient is the client API for FaradayServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaradayServerClient interface {
	//* frcli: `outliers`
	//Get close recommendations for currently open channels based on whether it is
	//an outlier.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/outliers/REVENUE?rec_request.minimum_monitored=123
	OutlierRecommendations(ctx context.Context, in *OutlierRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error)
	//* frcli: `threshold`
	//Get close recommendations for currently open channels based whether they are
	//below a set threshold.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/threshold/UPTIME?rec_request.minimum_monitored=123
	ThresholdRecommendations(ctx context.Context, in *ThresholdRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error)
	//* frcli: `revenue`
	//Get a pairwise revenue report for a channel.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/revenue
	RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error)
	//* frcli: `insights`
	//List currently open channel with routing and uptime information.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/insights
	ChannelInsights(ctx context.Context, in *ChannelInsightsRequest, opts ...grpc.CallOption) (*ChannelInsightsResponse, error)
	//* frcli:
	//Get fiat prices for btc.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/fiat
	FiatEstimate(ctx context.Context, in *FiatEstimateRequest, opts ...grpc.CallOption) (*FiatEstimateResponse, error)
	//*
	//Get a report of your node's activity over a period.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/nodereport
	NodeReport(ctx context.Context, in *NodeReportRequest, opts ...grpc.CallOption) (*NodeReportResponse, error)
}

type faradayServerClient struct {
	cc *grpc.ClientConn
}

func NewFaradayServerClient(cc *grpc.ClientConn) FaradayServerClient {
	return &faradayServerClient{cc}
}

func (c *faradayServerClient) OutlierRecommendations(ctx context.Context, in *OutlierRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error) {
	out := new(CloseRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/OutlierRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) ThresholdRecommendations(ctx context.Context, in *ThresholdRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error) {
	out := new(CloseRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/ThresholdRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error) {
	out := new(RevenueReportResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/RevenueReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) ChannelInsights(ctx context.Context, in *ChannelInsightsRequest, opts ...grpc.CallOption) (*ChannelInsightsResponse, error) {
	out := new(ChannelInsightsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/ChannelInsights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) FiatEstimate(ctx context.Context, in *FiatEstimateRequest, opts ...grpc.CallOption) (*FiatEstimateResponse, error) {
	out := new(FiatEstimateResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/FiatEstimate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) NodeReport(ctx context.Context, in *NodeReportRequest, opts ...grpc.CallOption) (*NodeReportResponse, error) {
	out := new(NodeReportResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/NodeReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaradayServerServer is the server API for FaradayServer service.
type FaradayServerServer interface {
	//* frcli: `outliers`
	//Get close recommendations for currently open channels based on whether it is
	//an outlier.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/outliers/REVENUE?rec_request.minimum_monitored=123
	OutlierRecommendations(context.Context, *OutlierRecommendationsRequest) (*CloseRecommendationsResponse, error)
	//* frcli: `threshold`
	//Get close recommendations for currently open channels based whether they are
	//below a set threshold.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/threshold/UPTIME?rec_request.minimum_monitored=123
	ThresholdRecommendations(context.Context, *ThresholdRecommendationsRequest) (*CloseRecommendationsResponse, error)
	//* frcli: `revenue`
	//Get a pairwise revenue report for a channel.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/revenue
	RevenueReport(context.Context, *RevenueReportRequest) (*RevenueReportResponse, error)
	//* frcli: `insights`
	//List currently open channel with routing and uptime information.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/insights
	ChannelInsights(context.Context, *ChannelInsightsRequest) (*ChannelInsightsResponse, error)
	//* frcli:
	//Get fiat prices for btc.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/fiat
	FiatEstimate(context.Context, *FiatEstimateRequest) (*FiatEstimateResponse, error)
	//*
	//Get a report of your node's activity over a period.
	//
	//Example request:
	//http://localhost:8466/v1/faraday/nodereport
	NodeReport(context.Context, *NodeReportRequest) (*NodeReportResponse, error)
}

// UnimplementedFaradayServerServer can be embedded to have forward compatible implementations.
type UnimplementedFaradayServerServer struct {
}

func (*UnimplementedFaradayServerServer) OutlierRecommendations(ctx context.Context, req *OutlierRecommendationsRequest) (*CloseRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutlierRecommendations not implemented")
}
func (*UnimplementedFaradayServerServer) ThresholdRecommendations(ctx context.Context, req *ThresholdRecommendationsRequest) (*CloseRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThresholdRecommendations not implemented")
}
func (*UnimplementedFaradayServerServer) RevenueReport(ctx context.Context, req *RevenueReportRequest) (*RevenueReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevenueReport not implemented")
}
func (*UnimplementedFaradayServerServer) ChannelInsights(ctx context.Context, req *ChannelInsightsRequest) (*ChannelInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInsights not implemented")
}
func (*UnimplementedFaradayServerServer) FiatEstimate(ctx context.Context, req *FiatEstimateRequest) (*FiatEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FiatEstimate not implemented")
}
func (*UnimplementedFaradayServerServer) NodeReport(ctx context.Context, req *NodeReportRequest) (*NodeReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeReport not implemented")
}

func RegisterFaradayServerServer(s *grpc.Server, srv FaradayServerServer) {
	s.RegisterService(&_FaradayServer_serviceDesc, srv)
}

func _FaradayServer_OutlierRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutlierRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).OutlierRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/OutlierRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).OutlierRecommendations(ctx, req.(*OutlierRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_ThresholdRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThresholdRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).ThresholdRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/ThresholdRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).ThresholdRecommendations(ctx, req.(*ThresholdRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_RevenueReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).RevenueReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/RevenueReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).RevenueReport(ctx, req.(*RevenueReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_ChannelInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).ChannelInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/ChannelInsights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).ChannelInsights(ctx, req.(*ChannelInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_FiatEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiatEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).FiatEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/FiatEstimate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).FiatEstimate(ctx, req.(*FiatEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_NodeReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).NodeReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/NodeReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).NodeReport(ctx, req.(*NodeReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FaradayServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "frdrpc.FaradayServer",
	HandlerType: (*FaradayServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutlierRecommendations",
			Handler:    _FaradayServer_OutlierRecommendations_Handler,
		},
		{
			MethodName: "ThresholdRecommendations",
			Handler:    _FaradayServer_ThresholdRecommendations_Handler,
		},
		{
			MethodName: "RevenueReport",
			Handler:    _FaradayServer_RevenueReport_Handler,
		},
		{
			MethodName: "ChannelInsights",
			Handler:    _FaradayServer_ChannelInsights_Handler,
		},
		{
			MethodName: "FiatEstimate",
			Handler:    _FaradayServer_FiatEstimate_Handler,
		},
		{
			MethodName: "NodeReport",
			Handler:    _FaradayServer_NodeReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
